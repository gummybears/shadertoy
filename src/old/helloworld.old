require "gtk4"
require "./ui.cr"

def activate(app : Gtk::Application)
  window = Gtk::ApplicationWindow.new(app)
  window.title = "Gtk Builder"
  window.set_default_size(200, 200)

  builder = Gtk::Builder.new_from_string(UI, UI.bytesize.to_i64)
  root = Gtk::Widget.cast(builder["root"])

  window.child = root
  window.present
end

app = Gtk::Application.new("hello.example.com", Gio::ApplicationFlags::None)
app.activate_signal.connect(->activate(Gtk::Application))
exit(app.run)

#def load_file(textbuffer,filename : String)
#
#  if File.directory?(filename) == false && File.readable?(filename)
#    lines = File.read_lines(filename)
#    lines = lines.join("\n")
#    textbuffer.set_text(lines,lines.size)
#  end
#end
#
#def update_statusbar(statusbar,text : String)
#  context_id   = statusbar1.context_id("statusbar")
#  lv_title     = window.title.not_nil!
#  statusbar1.push(context_id, lv_title)
#end
#
#args = ARGV
#if args.size != 1
#  puts "usage: load_glade.out 'glade file'"
#  exit
#end
#
#builder_file = args[0]
#if File.exists?(builder_file) == false
#  puts "file '#{builder_file}' not found"
#  exit
#end
#
#
## Construct a Gtk::Builder instance and load our UI description
#builder = Gtk::Builder.new_from_file builder_file
## Connect signal handlers to the constructed widgets
#window = Gtk::Window.cast(builder["window"])
#window.connect("destroy", &->Gtk.main_quit)
#
#textbuffer         = Gtk::TextBuffer.cast(builder["textbuffer1"])
#filechooser_open   = Gtk::Button.cast(builder["filechooser_open"])
#filechooser_cancel = Gtk::Button.cast(builder["filechooser_cancel"])
##filechooser_dialog = Gtk::FileChooserDialog.cast(builder["filechooserdialog1"])
#menu_filequit      = Gtk::MenuItem.cast(builder["app_quit"])
#menu_fileopen      = Gtk::MenuItem.cast(builder["file_open"])
#
#menu_filequit.on_activate do
#  Gtk.main_quit
#end
#
##Dir.chdir(File.expand_path("/home/icubic"))
#chooser_action = Gtk::FileChooserAction.new(0)
#menu_fileopen.on_activate do |button|
#
#  filechooser_dialog = Gtk::FileChooserDialog.new(
#                                                title: "Select shader",
#                                                action: :open ,
#                                                parent: nil,
#                                                create_folders: false,
#                                                deletable: false
#                                                #"_Cancel", Gtk::ResponseType::CANCEL
#                                                #"_Open", Gtk::ResponseType::ACCEPT
#                                              )
#  #filechooser_dialog.show
#  if filechooser_dialog.run == Gtk::ResponseType::ACCEPT
#    lv_filename = filechooser_dialog.filename().not_nil!
#    load_file(textbuffer,lv_filename)
#  end
#  #filechooser_dialog.destroy
#
#  filechooser_open.on_clicked do |button|
#    puts "button open clicked: filechooser #{filechooser_dialog}"
#    x = filechooser_dialog.filename()
#    if x
#      lv_filename = x.not_nil!
#      if File.directory?(lv_filename) == false && File.readable?(lv_filename)
#
#        puts "after button open clicked: filechooser #{filechooser_dialog}"
#        #filechooser_dialog.hide()
#        load_file(textbuffer,lv_filename)
#        #update_statusbar(statusbar1,text)
#        filechooser_dialog.destroy
#      end
#    end
#  end
#end
#
##filechooser_cancel.on_clicked do |button|
##  filechooser_dialog.hide()
##  puts "button cancel clicked: filechooser #{filechooser_dialog}"
##end
#
##
#window.show_all
#
